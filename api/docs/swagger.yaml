basePath: /api/v1
definitions:
  domain.JSONB:
    additionalProperties: true
    type: object
  request.Address:
    properties:
      address_line:
        type: string
      alternative_phone:
        type: string
      district:
        type: string
      landmark:
        type: string
      locality:
        type: string
      name:
        type: string
      phone_number:
        type: string
      pincode:
        type: string
      state_id:
        type: integer
    required:
    - address_line
    - name
    - phone_number
    - pincode
    type: object
  request.AdminLogin:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  request.Category:
    properties:
      category_name:
        minLength: 2
        type: string
    required:
    - category_name
    type: object
  request.ChangePassword:
    properties:
      new_password:
        type: string
      re_new_password:
        type: string
    required:
    - new_password
    - re_new_password
    type: object
  request.Coupon:
    properties:
      code:
        type: string
      coupon_name:
        type: string
      discount_max_amount:
        type: number
      discount_percentage:
        type: number
      min_order_value:
        type: number
      validity_days:
        minimum: 1
        type: integer
    required:
    - code
    - coupon_name
    - discount_max_amount
    - discount_percentage
    - min_order_value
    - validity_days
    type: object
  request.LoginData:
    properties:
      password:
        type: string
      phone:
        type: integer
    required:
    - password
    - phone
    type: object
  request.OldPassword:
    properties:
      old_password:
        type: string
    required:
    - old_password
    type: object
  request.Otp:
    properties:
      otp:
        type: string
      uuid:
        type: string
    required:
    - otp
    - uuid
    type: object
  request.Phone:
    properties:
      phone:
        minimum: 10
        type: integer
    required:
    - phone
    type: object
  request.Product:
    properties:
      price:
        type: integer
      product_description:
        type: string
      product_name:
        type: string
    required:
    - price
    - product_description
    - product_name
    type: object
  request.Rating:
    properties:
      description:
        type: string
      rating:
        type: integer
    required:
    - description
    - rating
    type: object
  request.SignUpData:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
      uuid:
        description: for retrieve user phone from the map
        type: string
    required:
    - email
    - password
    - username
    - uuid
    type: object
  request.VerifyPayment:
    properties:
      razorpay_order_id:
        type: string
      razorpay_payment_id:
        type: string
      razorpay_signature:
        type: string
    required:
    - razorpay_order_id
    - razorpay_payment_id
    - razorpay_signature
    type: object
  response.Address:
    properties:
      address_line:
        type: string
      alternative_phone:
        type: string
      district:
        type: string
      id:
        type: integer
      is_default:
        type: boolean
      landmark:
        type: string
      locality:
        type: string
      name:
        type: string
      phone_number:
        type: string
      pincode:
        type: string
      state:
        type: string
      state_id:
        type: integer
      user_id:
        type: integer
    type: object
  response.Cart:
    properties:
      brand:
        type: string
      cart_id:
        type: integer
      price:
        type: integer
      product_id:
        type: integer
      product_name:
        type: string
      qty:
        type: integer
    type: object
  response.CartItems:
    properties:
      discount:
        type: number
      items:
        items:
          $ref: '#/definitions/response.Cart'
        type: array
      total:
        type: number
    type: object
  response.Category:
    properties:
      category_name:
        type: string
      id:
        type: integer
      images:
        $ref: '#/definitions/domain.JSONB'
    type: object
  response.Checkout:
    properties:
      delivery_address:
        items:
          $ref: '#/definitions/response.Address'
        type: array
      discount:
        type: number
      items:
        items:
          $ref: '#/definitions/response.Cart'
        type: array
      payment_options:
        items:
          $ref: '#/definitions/response.PaymentMethod'
        type: array
      total:
        type: number
    type: object
  response.Coupon:
    properties:
      code:
        type: string
      coupon_name:
        type: string
      discount_max_amount:
        type: number
      discount_percentage:
        type: number
      id:
        type: integer
      is_blocked:
        type: boolean
      min_order_value:
        type: number
      valid_from:
        type: string
      valid_till:
        type: string
    type: object
  response.MonthlySalesReport:
    properties:
      average_order_value:
        type: number
      date:
        type: string
      report_from:
        type: string
      sales_growth_percentage:
        type: number
      top_selling_brand:
        type: string
      top_selling_product:
        type: string
      total_coupon_incentive:
        type: number
      total_quantity_sold:
        type: integer
      total_revenue:
        type: number
      total_sales_count:
        type: integer
    type: object
  response.OrderManagement:
    properties:
      order_statuses:
        items:
          $ref: '#/definitions/response.OrderStatus'
        type: array
      orders:
        items:
          $ref: '#/definitions/response.Orders'
        type: array
    type: object
  response.OrderStatus:
    properties:
      id:
        type: integer
      order_status:
        type: string
    type: object
  response.Orders:
    properties:
      delivery_address:
        type: string
      order_id:
        type: integer
      order_status:
        type: string
      payment_method:
        type: string
      product_id:
        type: integer
      product_image:
        type: string
      product_name:
        type: string
      product_price:
        type: number
    type: object
  response.PaymentMethod:
    properties:
      id:
        type: integer
      method:
        type: string
    type: object
  response.Product:
    properties:
      brand:
        type: string
      category_id:
        type: integer
      id:
        type: integer
      images:
        $ref: '#/definitions/domain.JSONB'
      is_blocked:
        type: boolean
      price:
        type: integer
      product_description:
        type: string
      product_name:
        type: string
      sku:
        type: string
    type: object
  response.ProductItem:
    properties:
      brand:
        type: string
      category_id:
        type: integer
      id:
        type: integer
      images:
        $ref: '#/definitions/domain.JSONB'
      is_blocked:
        type: boolean
      price:
        type: integer
      product_description:
        type: string
      product_name:
        type: string
      rating_and_reviews:
        items:
          $ref: '#/definitions/response.Rating'
        type: array
      sku:
        type: string
    type: object
  response.Profile:
    properties:
      addresses:
        items:
          $ref: '#/definitions/response.Address'
        type: array
      email:
        type: string
      phone:
        type: integer
      user_id:
        type: integer
      username:
        type: string
    type: object
  response.Rating:
    properties:
      desription:
        type: string
      rating:
        type: integer
      rating_id:
        type: integer
      user_name:
        type: string
    type: object
  response.Response:
    properties:
      data: {}
      error: {}
      message:
        type: string
      status-code:
        type: integer
    type: object
  response.Token:
    properties:
      token:
        type: string
    type: object
  response.UserData:
    properties:
      created_at:
        type: string
      email:
        type: string
      is_blocked:
        type: boolean
      phone:
        type: integer
      user_id:
        type: integer
      user_name:
        type: string
    type: object
host: localhost:3000
info:
  contact:
    email: anazibinurasheed@gmail.com
    name: Anaz Ibinu Rasheed
    url: https://www.linkedin.com/in/anaz-ibinu-rasheed-a2b461253/
  description: A e-Commerce API in Go using Gin framework
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Project Device Mart API
  version: "1.0"
paths:
  /admin/category/add-category:
    post:
      consumes:
      - application/json
      description: Creates a new category based on the provided category name.
      parameters:
      - description: Category name
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.Category'
      produces:
      - application/json
      responses:
        "200":
          description: Success, category created
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.Category'
              type: object
        "400":
          description: Failed, input does not meet validation criteria
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to create new category
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Create category
      tags:
      - admin category management
  /admin/category/add-image/{categoryID}:
    post:
      consumes:
      - multipart/form-data
      description: Upload category images.
      parameters:
      - description: Category ID
        in: path
        name: categoryID
        required: true
        type: integer
      - description: Image file to upload
        in: formData
        name: category-image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: success, image uploaded
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: "failed to get image from file\"\tor\t\"no files received to
            the server"
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: failed to upload image
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: UploadCategoryImage
      tags:
      - admin category management
  /admin/category/block-category/{categoryID}:
    put:
      description: Blocks a category with the specified ID.
      parameters:
      - description: Category ID
        in: path
        name: categoryID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success, category has been blocked
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Failed to retrieve param from URL
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to block category
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Block a category
      tags:
      - admin category management
  /admin/category/categories:
    get:
      description: Retrieves all available categories.
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        required: true
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: count
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.Category'
                  type: array
              type: object
        "400":
          description: Failed to bind page info from request
          schema:
            $ref: '#/definitions/response.Response'
        "503":
          description: Failed to retrieve categories
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: List out all categories
      tags:
      - admin category management
  /admin/category/unblock-category/{categoryID}:
    put:
      consumes:
      - application/json
      description: Unblocks a category with the specified ID.
      parameters:
      - description: Category ID
        in: path
        name: categoryID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success, category unblocked
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Failed to retrieve param from URL
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to block category
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Unblock a category
      tags:
      - admin category management
  /admin/category/update-category/{categoryID}:
    put:
      consumes:
      - application/json
      description: Updates a category with the specified ID.
      parameters:
      - description: Category ID
        in: path
        name: categoryID
        required: true
        type: integer
      - description: Category name
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.Category'
      produces:
      - application/json
      responses:
        "200":
          description: Success, category updated
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Failed to retrieve param from URL
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to update category
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Update a category
      tags:
      - admin category management
  /admin/login:
    post:
      consumes:
      - application/json
      description: Admin can login using username and password.
      parameters:
      - description: Admin login credentials
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.AdminLogin'
      produces:
      - application/json
      responses:
        "200":
          description: Login success
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.Token'
              type: object
        "400":
          description: Failed, input does not meet validation criteria
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to generate token
          schema:
            $ref: '#/definitions/response.Response'
      summary: Admin Login
      tags:
      - auth
  /admin/orders:
    get:
      description: Retrieves all order overview data.
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        required: true
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: count
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.Orders'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Get all order overview data
      tags:
      - admin order management
  /admin/orders/{orderID}/update-status/{statusID}:
    put:
      description: Updates the status of an order with the specified ID.
      parameters:
      - description: Order ID
        in: path
        name: orderID
        required: true
        type: integer
      - description: Status ID
        in: path
        name: statusID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Update order status
      tags:
      - admin order management
  /admin/orders/management:
    get:
      description: Retrieves order management data.
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        required: true
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: count
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.OrderManagement'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Get order management data
      tags:
      - admin order management
  /admin/product/add-images/{productID}:
    post:
      consumes:
      - multipart/form-data
      description: Upload product images.
      parameters:
      - description: Product ID
        in: path
        name: productID
        required: true
        type: integer
      - description: Image file to upload
        in: formData
        name: product-image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Success, images uploaded
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: "Failed to get image from file\"\tor\t\"No files received to
            the server\"\tor\t\"Invalid input"
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to upload image
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: UploadProductImages
      tags:
      - admin product management
  /admin/product/add-product/{categoryID}:
    post:
      consumes:
      - application/json
      description: Creates a new product with the specified details.
      parameters:
      - description: Category ID
        in: path
        name: categoryID
        required: true
        type: integer
      - description: Product details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.Product'
      produces:
      - application/json
      responses:
        "200":
          description: Success, added new product
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.Product'
              type: object
        "400":
          description: Failed, category not found
          schema:
            $ref: '#/definitions/response.Response'
        "409":
          description: Failed, product already exist with same name
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to create product
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Create a new product
      tags:
      - admin product management
  /admin/product/block-product/{productID}:
    put:
      consumes:
      - application/json
      description: Blocks a product with the specified ID.
      parameters:
      - description: Product ID
        in: path
        name: productID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success, product blocked
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Failed to retrieve param from URL
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to block product
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Block a product
      tags:
      - admin product management
  /admin/product/products:
    get:
      description: Retrieves a list of all products including blocked.
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        required: true
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: count
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.Product'
                  type: array
              type: object
        "400":
          description: Failed to bind page info from request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to fetch products
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Display  products to admin
      tags:
      - admin product management
  /admin/product/unblock-product/{productID}:
    put:
      description: Unblocks a product with the specified ID.
      parameters:
      - description: Product ID
        in: path
        name: productID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success, unblocked product
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Failed to retrieve param from URL
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to unblock product
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Unblock a product
      tags:
      - admin product management
  /admin/product/update-product/{productID}:
    put:
      consumes:
      - application/json
      description: Updates an existing product with the specified ID.
      parameters:
      - description: Product ID
        in: path
        name: productID
        required: true
        type: integer
      - description: Product object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.Product'
      produces:
      - application/json
      responses:
        "200":
          description: Success, product updated
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Failed, input does not meet validation criteria
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed update product
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Update a product
      tags:
      - admin product management
  /admin/promotions/all-coupons:
    get:
      description: List out all the created coupons to the admin.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.Coupon'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: List out all coupons to admin
      tags:
      - promotions
  /admin/promotions/block-coupon/{couponID}:
    put:
      description: Block the existing coupon by id.
      parameters:
      - description: coupon ID
        in: path
        name: couponID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success, coupon blocked
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Failed to retrieve param from URL
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to block coupon
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Block coupon
      tags:
      - promotions
  /admin/promotions/create-coupon:
    post:
      consumes:
      - application/json
      description: Create a new coupon with the provided details
      parameters:
      - description: Coupon details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.Coupon'
      produces:
      - application/json
      responses:
        "201":
          description: Success, created new coupon
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Failed, input does not meet validation criteria
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to create coupon
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Create a new coupon
      tags:
      - promotions
  /admin/promotions/unblock-coupon/{couponID}:
    put:
      description: Unblock the existing coupon by id.
      parameters:
      - description: coupon ID
        in: path
        name: couponID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Failed to retrieve param from URL
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Unblock coupon
      tags:
      - promotions
  /admin/promotions/update-coupon/{couponID}:
    put:
      consumes:
      - application/json
      description: Create a new coupon with the provided details
      parameters:
      - description: coupon ID
        in: path
        name: couponID
        required: true
        type: integer
      - description: Coupon details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.Coupon'
      produces:
      - application/json
      responses:
        "200":
          description: Successful,coupon updated
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Failed to retrieve param from URL
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to update coupon
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Updates the existing
      tags:
      - promotions
  /admin/sales-report:
    get:
      description: Sales report of last 30 days from the requested time
      produces:
      - application/json
      responses:
        "200":
          description: No orders created yet
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.MonthlySalesReport'
              type: object
        "500":
          description: Failed to generate the sales report
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Monthly sales report
      tags:
      - sales-report
  /admin/user-management/block-user/{userID}:
    put:
      consumes:
      - application/json
      description: Blocks a user with the specified ID.
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success, user has been blocked
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Failed to retrieve param from URL
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to block user
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Block a user
      tags:
      - admin user management
  /admin/user-management/unblock-user/{userID}:
    put:
      consumes:
      - application/json
      description: Unblocks a user with the specified ID.
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Unblock a user
      tags:
      - admin user management
  /admin/user-management/view-all-users:
    get:
      description: List of all users
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        required: true
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: count
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.UserData'
                  type: array
              type: object
        "500":
          description: Failed to fetch users
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: View all users
      tags:
      - admin user management
  /cart:
    get:
      description: Retrieves the cart items for the authenticated user.
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        required: true
        type: integer
      - default: 5
        description: Number of items per page
        in: query
        name: count
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CartItems'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: View cart
      tags:
      - cart
  /cart/{productID}/decrement:
    put:
      description: Decrements the quantity of a product in the cart for the authenticated
        user.
      parameters:
      - description: Product ID
        in: path
        name: productID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Decrement product quantity in cart
      tags:
      - cart
  /cart/{productID}/increment:
    put:
      description: Increments the quantity of a product in the cart for the authenticated
        user.
      parameters:
      - description: Product ID
        in: path
        name: productID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Increment product quantity in cart
      tags:
      - cart
  /cart/add/{productID}:
    post:
      description: Adds a product to the cart for the authenticated user.
      parameters:
      - description: Product ID
        in: path
        name: productID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Add product to cart
      tags:
      - cart
  /cart/remove/{productID}:
    delete:
      description: Removes a product from the cart for the authenticated user.
      parameters:
      - description: Product ID
        in: path
        name: productID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Remove product from cart
      tags:
      - cart
  /category/{categoryID}:
    get:
      consumes:
      - application/json
      description: Lists products based on the provided category ID.
      parameters:
      - description: Category ID
        in: path
        name: categoryID
        required: true
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page
        required: true
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: count
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.Product'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: List products by category
      tags:
      - products
  /category/all:
    get:
      description: Retrieves all available categories.
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        required: true
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: count
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.Category'
                  type: array
              type: object
        "400":
          description: Failed to bind page info from request
          schema:
            $ref: '#/definitions/response.Response'
        "503":
          description: Failed to retrieve categories
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: List out all categories
      tags:
      - category
  /checkout:
    get:
      description: Displays the checkout details for the current user.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.Checkout'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Checkout page
      tags:
      - checkout
  /coupon/apply:
    post:
      consumes:
      - application/json
      description: Apply the coupon and if valid provide coupon discount
      parameters:
      - description: Coupon code
        in: body
        name: body
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Apply coupon
      tags:
      - coupon
  /coupon/available:
    get:
      description: Get a list of available coupons for the authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.Coupon'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: List available coupons for the user
      tags:
      - coupon
  /coupon/remove/{couponID}:
    delete:
      description: Remove the applied coupon from the user's coupon tracking.
      parameters:
      - description: Coupon ID
        in: path
        name: couponID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Remove applied coupon
      tags:
      - coupon
  /login:
    post:
      consumes:
      - application/json
      description: Logs in a user and sends an OTP for verification.
      parameters:
      - description: User login data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.LoginData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: User login data, verify it and send otp
      tags:
      - auth
  /logout:
    post:
      consumes:
      - application/json
      description: Logs out user and removes token from the header.
      produces:
      - application/json
      responses:
        "202":
          description: Logged out, success
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: User Logout
      tags:
      - auth
  /orders:
    get:
      description: Retrieves the order history of the current user.
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        required: true
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: count
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.Orders'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Get order history
      tags:
      - user orders
  /orders/cancel/{orderID}:
    post:
      consumes:
      - application/json
      description: |-
        Cancel the order. For online payments, the amount will be added to the user's wallet. For cash on delivery orders,will be marked as cancelled.
        If the user has used a coupon for the order, the discount amount will be recalculated based on the percentage used and deducted from the refunding amount.
      parameters:
      - description: Order ID
        in: path
        name: orderID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Cancel an order
      tags:
      - user orders
  /orders/invoice/{orderID}:
    get:
      description: Download the invoice as a PDF file.
      parameters:
      - description: Order ID
        in: path
        name: orderID
        required: true
        type: integer
      produces:
      - application/pdf
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Download invoice
      tags:
      - user orders
  /orders/return/{orderID}:
    post:
      consumes:
      - application/json
      description: |-
        Return the order if the order is valid for return.Amount will be added to the user's wallet.
        If the user has used a coupon for the order, the discount amount will be recalculated based
        on the percentage used and deducted from the refunding amount.
      parameters:
      - description: Order ID
        in: path
        name: orderID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Return order
      tags:
      - user orders
  /payment/cod-confirm:
    post:
      description: Confirms the cash on delivery (COD) delivery for the current user.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Confirm COD delivery
      tags:
      - checkout
  /payment/online:
    get:
      description: Make payment using razorpay page .
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Make payment razorpay
      tags:
      - checkout
  /payment/online/process:
    post:
      description: Verify razorpay payment using razorpay credentials .
      parameters:
      - description: Payment details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.VerifyPayment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Verify razorpay payment
      tags:
      - checkout
  /payment/wallet:
    post:
      description: User can purchase using wallet
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Pay using wallet
      tags:
      - checkout
  /product/:
    get:
      consumes:
      - application/json
      description: Retrieves all available products for the user.
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        required: true
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: count
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.Product'
              type: object
        "400":
          description: Failed to bind page info from request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to retrieve products
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Display all products to the user
      tags:
      - products
  /product/{productID}:
    get:
      description: Retrieves details of a product with the specified ID.
      parameters:
      - description: Product ID
        in: path
        name: productID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.ProductItem'
              type: object
        "400":
          description: Failed to retrieve param from URL
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to fetch product
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: View a product
      tags:
      - products
  /product/rating/{productID}:
    get:
      consumes:
      - application/json
      description: Validates if the user is authorized to rate a product.
      parameters:
      - description: Product ID
        in: path
        name: productID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success, user is valid for rating the product
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Failed to retrieve param from URL
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: User doesn't purchased this product
          schema:
            $ref: '#/definitions/response.Response'
        "409":
          description: User already rated this product
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to retrieve user id from context
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Validate product rating request
      tags:
      - user orders
    post:
      consumes:
      - application/json
      description: Adds a new rating for a product.
      parameters:
      - description: Product ID
        in: path
        name: productID
        required: true
        type: integer
      - description: Rating details
        in: body
        name: rating
        required: true
        schema:
          $ref: '#/definitions/request.Rating'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Add product rating
      tags:
      - user orders
  /product/search:
    post:
      consumes:
      - application/json
      description: Searches for products based on the provided search input
      parameters:
      - description: Search input
        in: query
        name: search
        required: true
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        required: true
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: count
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Search Products
      tags:
      - products
  /profile:
    get:
      description: Retrieves the profile information for the authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.Profile'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Get user profile
      tags:
      - user profile
  /profile/add-address:
    get:
      description: Retrieves the list of states for address selection.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Get the page for adding an address
      tags:
      - user profile
    post:
      consumes:
      - application/json
      description: Adds a new address for the user.
      parameters:
      - description: Address details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.Address'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Add a new address
      tags:
      - user profile
  /profile/address-default/{addressID}:
    put:
      description: Sets the specified address as the default address for the authenticated
        user.
      parameters:
      - description: Address ID
        in: path
        name: addressID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Set default address
      tags:
      - user profile
  /profile/addresses:
    get:
      description: Retrieves all addresses for the user.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Get all addresses
      tags:
      - user profile
  /profile/change-password:
    post:
      consumes:
      - application/json
      description: Change the password of the authenticated user
      parameters:
      - description: uuid
        in: path
        name: uuid
        required: true
        type: integer
      - description: Change password request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.ChangePassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Change user password
      tags:
      - user profile
  /profile/delete-address/{addressID}:
    delete:
      description: Deletes an address by its ID.
      parameters:
      - description: Address ID
        in: path
        name: addressID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Delete an address
      tags:
      - user profile
  /profile/edit-username:
    post:
      consumes:
      - application/json
      description: Edit the username of the authenticated user
      parameters:
      - description: New username
        in: body
        name: body
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      - ApiKeyAuth: []
      summary: Edit user username
      tags:
      - user profile
  /profile/update-address/{addressID}:
    put:
      consumes:
      - application/json
      description: Updates an existing address for the user.
      parameters:
      - description: Address ID
        in: path
        name: addressID
        required: true
        type: integer
      - description: Address update details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.Address'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Update an address
      tags:
      - user profile
  /profile/verify-password:
    post:
      consumes:
      - application/json
      description: validate the user password based on the provided old password and
        return a Id in success response to send to next Api as query with name uuid.
      parameters:
      - description: User's old password
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.OldPassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      - ApiKeyAuth: []
      summary: Change user password request
      tags:
      - user profile
  /referral/claim:
    post:
      consumes:
      - application/json
      description: Apply a  referral code  to get wallet money,
      parameters:
      - description: Referral code to apply
        in: body
        name: body
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success, bonus amount updated in wallet.
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid Input.
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Failed.
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed.
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      - ApiKeyAuth: []
      summary: Apply referral code for referral bonus.
      tags:
      - referral
  /referral/get-code:
    get:
      description: Get the referral code of the currently logged-in user
      produces:
      - application/json
      responses:
        "200":
          description: Success.
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed.
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Get the referral code for the current user
      tags:
      - referral
  /send-otp:
    post:
      consumes:
      - application/json
      description: Sends an OTP to the provided phone number. Should take the uuid
        and verify the otp using verify otp api then take the uuid and include it
        also in the sign up credentials. Else will not work
      parameters:
      - description: Phone number
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.Phone'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Failed, input does not meet validation criteria
          schema:
            $ref: '#/definitions/response.Response'
      summary: Send sign up OTP to Phone
      tags:
      - auth
  /sign-up:
    post:
      consumes:
      - application/json
      description: Creates a new user account.
      parameters:
      - description: User Sign-Up Data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.SignUpData'
      produces:
      - application/json
      responses:
        "201":
          description: Success, account created
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Failed, input does not meet validation criteria
          schema:
            $ref: '#/definitions/response.Response'
      summary: User Sign-Up after otp validation
      tags:
      - auth
  /verify-otp:
    post:
      consumes:
      - application/json
      description: Validates the provided OTP for a phone number. Provide the accurate
        uuid and otp = 0000(predefined).
      parameters:
      - description: OTP
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.Otp'
      produces:
      - application/json
      responses:
        "200":
          description: Success, verified phone number
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Incorrect otp
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: OTP expired
          schema:
            $ref: '#/definitions/response.Response'
      summary: Verify sign up  OTP
      tags:
      - auth
  /wallet/:
    get:
      description: Get the wallet details for the authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: View user wallet
      tags:
      - wallet
  /wallet/create:
    post:
      consumes:
      - application/json
      description: Initialize the wallet for the authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Create user wallet
      tags:
      - wallet
  /wallet/history:
    get:
      description: This endpoint will show all the wallet transaction history of the
        user.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: User wallet transaction history
      tags:
      - wallet
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
